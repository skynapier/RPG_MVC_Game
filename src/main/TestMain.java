package main;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;

import org.junit.Test;

import Board.Board;

public class TestMain {

	public void maketestfile(String test){
		try{
			PrintWriter writer = new PrintWriter("test.txt", "UTF-8");
			writer.write(test);
			writer.close();
		} catch (IOException e) {
			// do something
		}

	}

	@Test
	public void testMove01() throws InvalidMove {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("down");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testMove02() throws InvalidMove {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}
	@Test
	public void testMove03() throws InvalidMove {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("left");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}
	@Test
	public void testMove04() throws InvalidMove {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("right");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testInvalidMove01()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 01 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove02()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 10 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove03()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 11 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove04()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 20 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}
	@Test
	public void testInvalidMove05()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 21 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove06()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 22 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove07()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 23 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testInvalidMove08()  {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 24 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		try{
			Game g = new Game("test.txt");
			g.move("up");
		}catch(InvalidMove e){

		}
	}

	@Test
	public void testOpenDoor01() throws InvalidMove {
		String testfile =  "down i ( 30 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 20 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testOpenDoor02() throws InvalidMove {
		String testfile =  "down i ( 31 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 21 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testOpenDoor03() throws InvalidMove {
		String testfile =  "down i ( 32 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 22 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testOpenDoor04() throws InvalidMove {
		String testfile =  "down i ( 33 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 23 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testOpenDoor05() throws InvalidMove {
		String testfile =  "down i ( 34 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 24 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testBreakWall() throws InvalidMove {
		String testfile =  "up i ( 43 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 11 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.tryBomb();
		g.move("up");
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testEquip() throws InvalidMove {
		String testfile =  "down i ( )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "71 74 76\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 70 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 73 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 76 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		String token =  
				"l 1 (\n" 
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 30 71 30 00 00 00 00 00\n"
						+	" 00 00 00 00 00 74 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 76 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
						+	")\n";
		Game g = new Game("test.txt");
		g.tryPickEquipment();
		assertEquals("70",g.getPlayer().getCurrentArmor().getName());
		g.move("down");
		g.tryPickEquipment();
		assertEquals("73",g.getPlayer().getCurrentWeapon().getName());
		g.move("down");
		g.tryPickEquipment();
		assertEquals("76",g.getPlayer().getCurrentWing().getName());
		assertEquals(token,g.getBoard().getCurrentLevel().toString());
	}

	@Test
	public void testFateCoin() throws InvalidMove  {
		String testfile =  "down i ( 48 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 22 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		Game g = new Game("test.txt");
		g.tryUseFateCoin();

	}

	@Test
	public void testRestoreHealth() throws InvalidMove  {
		String testfile =  "down i ( 40 41 )\n"
				+ "5 5 100 10 10 0 1\n" 
				+ "-1 -1 -1\n" 
				+ "( 1 )\n"
				+" l 1 (\n" 
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 22 00 00 00 00 00 00\n"
				+	" 00 00 00 00 30 00 30 00 00 00 00 00\n"
				+	" 00 00 00 00 00 30 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	" 00 00 00 00 00 00 00 00 00 00 00 00\n"
				+	")\n";

		maketestfile(testfile);
		Game g = new Game("test.txt");
		g.tryRestoreHealth("big");
		g.tryRestoreHealth("small");
	}

	@Test
	public void testsave(){
		Game g = new Game();
		g.save();
		try {
			InputStream loadfile = Board.class.getResourceAsStream("OriginalMap.txt");
			FileReader savefile =  new FileReader("save.txt");
			BufferedReader load = new BufferedReader(new InputStreamReader(loadfile));
			BufferedReader save = new BufferedReader(savefile);
			save.readLine();
			save.readLine();
			save.readLine();
			save.readLine();
			Scanner sc1 = new Scanner(load);
			Scanner sc2 = new Scanner(save);
			StringBuilder str1 = new StringBuilder();
			StringBuilder str2 = new StringBuilder();
			while(sc1.hasNext()) str1.append(sc1.next());
			while(sc2.hasNext()) str2.append(sc2.next());
			assertEquals(str1.toString(),str2.toString());
			if(!str1.toString().equals(str2.toString())){
				System.out.println(str1);
				System.out.println(str2);
			}

		} catch (FileNotFoundException ex) {
			System.out.println(ex);
		} catch (IOException ex) {
			System.out.println(ex);
		}
	}

}
